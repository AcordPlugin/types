const typeGenerator = require("./typeGenerator")

const acord = {
  dev: {
    unload: () => ({ returns: "Promise<void>" })
  },
  dom: {
    createElement: () => null,
    parseHTML: () => null,
    parents: () => null,
    escapeHTML: () => null,
    toCSSProp: () => null,
    toHTMLProps: () => null,
  },
  events: {
    emit: () => null,
    off: () => null,
    on: () => null,
    once: () => null,
  },
  extensions: {
    evaluate: () => null,
    load: () => null,
    nests: {
      loaded: {
        ghost: {},
        store: {},
      },
      enabled: {
        ghost: {},
        store: {},
      }
    },
    reload: () => null,
    reloadAll: () => null,
    remove: () => null,
    start: () => null,
    startAll: () => null,
    stop: () => null,
    stopAll: () => null,
    toggle: () => null,
  },
  i18n: {
    messages: {},
    format: () => null,
    locale: "en_US"
  },
  modules: {
    common: {
      ActivityStore: {
        findActivity: () => null,
        getActivities: () => null,
        getActivityMetadata: () => null,
        getAllApplicationActivities: () => null,
        getPrimaryActivity: () => null,
        getState: () => null,
        getStatus: () => null,
        getUserIds: () => null,
        isMobileOnline: () => null,
        setCurrentUserOnConnectionOpen: () => null,
        __getLocalVars: () => null,
      },
      Button: () => null,
      ChannelStore: {
        getAllThreadsForParent: () => null,
        getBasicChannel: () => null,
        getCachedChannelJsonForGuild: () => null,
        getChannel: () => null,
        getDMFromUserId: () => null,
        getDMUserIds: () => null,
        getGuildChannelsVersion: () => null,
        getInitialOverlayState: () => null,
        getMutableBasicGuildChannelsForGuild: () => null,
        getMutableGuildChannelsForGuild: () => null,
        getMutablePrivateChannels: () => null,
        getPrivateChannelsVersion: () => null,
        getSortedPrivateChannels: () => null,
        hasChannel: () => null,
        hasRestoredGuild: () => null,
        loadAllGuildAndPrivateChannelsFromDisk: () => null,
        __getLocalVars: () => null,
      },
      DiscordAPI: {
        delete: () => null,
        get: () => null,
        patch: () => null,
        post: () => null,
        put: () => null,
      },
      Flux: {},
      FluxDispatcher: {
        subscribe: () => null,
        unsubscribe: () => null,
        dispatch: () => null,
      },
      GuildMemberStore: {
        getCommunicationDisabledUserMap: () => null,
        getCommunicationDisabledVersion: () => null,
        getMember: () => null,
        getMemberIds: () => null,
        getMembers: () => null,
        getMutableAllGuildsAndMembers: () => null,
        getNick: () => null,
        getNicknameGuildsMapping: () => null,
        getNicknames: () => null,
        getSelfMember: () => null,
        initialize: () => null,
        isMember: () => null,
        memberOf: () => null,
        __getLocalVars: () => null,
      },
      InviteStore: {
        acceptInvite: () => null,
        acceptInviteAndTransitionToInviteChannel: () => null,
        createFriendInvite: () => null,
        createInvite: () => null,
        getAllFriendInvites: () => null,
        getInviteContext: () => null,
        openApp: () => null,
        openNativeAppModal: () => null,
        resolveInvite: () => null,
        revokeFriendInvites: () => null,
        revokeInvite: () => null,
        transitionToInvite: () => null,
        transitionToInviteChannelSync: () => null,
        transitionToInviteSync: () => null,
      },
      Markdown: () => null,
      MessageStore: {
        focusedMessageId: () => null,
        getLastCommandMessage: () => null,
        getLastEditableMessage: () => null,
        getMessage: () => null,
        getMessages: () => null,
        getRawMessages: () => null,
        hasCurrentUserSentMessage: () => null,
        hasPresent: () => null,
        initialize: () => null,
        isLoadingMessages: () => null,
        jumpedMessageId: () => null,
        whenReady: () => null,
        __getLocalVars: () => null,
      },
      NoteStore: {
        getNote: () => null,
        __getLocalVars: () => null
      },
      PermissionStore: {
        can: () => null,
        canAccessGuildSettings: () => null,
        canManageUser: () => null,
        canWithPartialContext: () => null,
        computePermissions: () => null,
        getChannelPermissions: () => null,
        getChannelsVersion: () => null,
        getGuildPermissionProps: () => null,
        getGuildPermissions: () => null,
        getGuildVersion: () => null,
        getHighestRole: () => null,
        initialize: () => null,
        isRoleHigher: () => null,
        __getLocalVars: () => null,
      },
      React: {
        cloneElement: () => null,
        createContext: () => null,
        createElement: () => null,
        createFactory: () => null,
        createRef: () => null,
        forwardRef: () => null,
        isValidElement: () => null,
        lazy: () => null,
        memo: () => null,
        useCallback: () => null,
        useContext: () => null,
        useDebugValue: () => null,
        useEffect: () => null,
        useImperativeHandle: () => null,
        useLayoutEffect: () => null,
        useMemo: () => null,
        useReducer: () => null,
        useRef: () => null,
        useState: () => null,
      },
      ReactDOM: {},
      RelationshipStore: {
        getFriendIDs: () => null,
        getNickname: () => null,
        getPendingCount: () => null,
        getRelationshipCount: () => null,
        getRelationshipType: () => null,
        getRelationships: () => null,
        initialize: () => null,
        isBlocked: () => null,
        isFriend: () => null,
        __getLocalVars: () => null,
      },
      Router: {
        replaceWith: () => null,
        transitionTo: () => null,
        transitionToGuild: () => null,
      },
      SelectedChannelStore: {
        getChannelId: () => null,
        getCurrentlySelectedChannelId: () => null,
        getLastChannelFollowingDestination: () => null,
        getLastSelectedChannelId: () => null,
        getLastSelectedChannels: () => null,
        getMostRecentSelectedTextChannelId: () => null,
        getVoiceChannelId: () => null,
        initialize: () => null,
        __getLocalVars: () => null,
      },
      SelectedGuildStore: {
        getGuildId: () => null,
        getLastSelectedGuildId: () => null,
        getLastSelectedTimestamp: () => null,
        getState: () => null,
        initialize: () => null,
        __getLocalVars: () => null,
      },
      SimpleMarkdown: {
        ReactMarkdown: () => null,
        anyScopeRegex: () => null,
        blockRegex: () => null,
        defaultBlockParse: () => null,
        defaultHtmlOutput: () => null,
        defaultImplicitParse: () => null,
        defaultInlineParse: () => null,
        defaultOutput: () => null,
        defaultParse: () => null,
        defaultRawParse: () => null,
        defaultReactOutput: () => null,
        defaultRules: {},
        htmlFor: () => null,
        htmlTag: () => null,
        inlineRegex: () => null,
        markdownToHtml: () => null,
        markdownToReact: () => null,
        outputFor: () => null,
        parseBlock: () => null,
        parseInline: () => null,
        parserFor: () => null,
        preprocess: () => null,
        reactElement: () => null,
        reactFor: () => null,
        ruleOutput: () => null,
        sanitizeText: () => null,
        sanitizeUrl: () => null,
        unescapeUrl: () => null,
      },
      TypingStore: {
        getTypingUsers: () => null,
        isTyping: () => null,
        __getLocalVars: () => null,
      },
      UserStore: {
        filter: () => null,
        findByTag: () => null,
        forEach: () => null,
        getCurrentUser: () => null,
        getUser: () => null,
        getUsers: () => null,
        initialize: () => null,
        __getLocalVars: () => null,
      },
      VoiceStateStore: {
        getAllVoiceStates: () => null,
        getCurrentClientVoiceChannelId: () => null,
        getUserVoiceChannelId: () => null,
        getVideoVoiceStatesForChannel: () => null,
        getVoiceState: () => null,
        getVoiceStateForChannel: () => null,
        getVoiceStateForSession: () => null,
        getVoiceStateForUser: () => null,
        getVoiceStates: () => null,
        getVoiceStatesForChannel: () => null,
        hasVideo: () => null,
        isCurrentClientInVoiceChannel: () => null,
        isInChannel: () => null,
        __getLocalVars: () => null,
      },
      constants: {
        Permissions: {
          ADD_REACTIONS: 64n,
          ADMINISTRATOR: 8n,
          ATTACH_FILES: 32768n,
          BAN_MEMBERS: 4n,
          CHANGE_NICKNAME: 67108864n,
          CONNECT: 1048576n,
          CREATE_INSTANT_INVITE: 1n,
          CREATE_PRIVATE_THREADS: 68719476736n,
          CREATE_PUBLIC_THREADS: 34359738368n,
          DEAFEN_MEMBERS: 8388608n,
          EMBED_LINKS: 16384n,
          KICK_MEMBERS: 2n,
          MANAGE_CHANNELS: 16n,
          MANAGE_EVENTS: 8589934592n,
          MANAGE_GUILD: 32n,
          MANAGE_GUILD_EXPRESSIONS: 1073741824n,
          MANAGE_MESSAGES: 8192n,
          MANAGE_NICKNAMES: 134217728n,
          MANAGE_ROLES: 268435456n,
          MANAGE_THREADS: 17179869184n,
          MANAGE_WEBHOOKS: 536870912n,
          MENTION_EVERYONE: 131072n,
          MODERATE_MEMBERS: 1099511627776n,
          MOVE_MEMBERS: 16777216n,
          MUTE_MEMBERS: 4194304n,
          PRIORITY_SPEAKER: 256n,
          READ_MESSAGE_HISTORY: 65536n,
          REQUEST_TO_SPEAK: 4294967296n,
          SEND_MESSAGES: 2048n,
          SEND_MESSAGES_IN_THREADS: 274877906944n,
          SEND_TTS_MESSAGES: 4096n,
          SPEAK: 2097152n,
          STREAM: 512n,
          USE_APPLICATION_COMMANDS: 2147483648n,
          USE_EMBEDDED_ACTIVITIES: 549755813888n,
          USE_EXTERNAL_EMOJIS: 262144n,
          USE_EXTERNAL_STICKERS: 137438953472n,
          USE_VAD: 33554432n,
          VIEW_AUDIT_LOG: 128n,
          VIEW_CHANNEL: 1024n,
          VIEW_CREATOR_MONETIZATION_ANALYTICS: 2199023255552n,
          VIEW_GUILD_ANALYTICS: 524288n,
        }
      },
      i18n: {
        getAvailableLocales: () => null,
        getDefaultLocale: () => null,
        getLanguages: () => null,
        getLocale: () => null,
        getLocaleInfo: () => null,
        setLocale: () => null,
        setUpdateRules: () => null,
        updateMessagesForExperiment: () => null,
        _chosenLocale: "tr",
        Messages: {},
      },
      modals: {
        ModalComponents: () => null,
        ModalRoot: () => null,
        actions: {
          close: () => null,
          show: () => null
        }
      },
      uuid: {
        parse: () => null,
        unparse: () => null,
        v1: () => null,
        v4: () => null,
      }
    },
    require: () => null,
    webpack: {
      find: () => null,
      findAll: () => null,
      findByKeyword: () => null,
      findByKeywordAll: () => null,
      findByNestedProps: () => null,
      findByNestedPropsAll: () => null,
      findByProperties: () => null,
      findByPropertiesAll: () => null,
      findByProps: () => null,
      findByPropsAll: () => null,
      findByPrototypes: () => null,
      findByPrototypesAll: () => null,
      findByStrings: () => null,
      findByStringsAll: () => null,
    }
  },
  patcher: {
    after: () => null,
    before: () => null,
    injectCSS: () => null,
    instead: () => null,
    unpatchAll: () => null,
    unpatchAllCSS: () => null,
  },
  ui: {
    contextMenus: {
      build: {
        item: () => null,
        menu: () => null,
      },
      open: () => null,
      patch: () => null,
    },
    modals: {
      show: () => null,
    },
    notices: {
      show: () => null,
    },
    toasts: {
      show: () => null,
    },
    tooltips: {
      create: () => null,
    }
  },
  unload: () => null,
  utils: {
    copyText: () => null,
    findInTree: () => null,
    format: () => null,
    ifExists: () => null,
    interval: () => null,
    logger: { log: () => null, warn: () => null, error: () => null },
    react: { getInstance: () => null, getOwnerInstance: () => null, findInTree: () => null, findByDomNode: () => null, getComponents: () => null, getProps: () => null, getStateNodes: () => null },
    sleep: () => null,
    timeout: () => null,
  },
  websocket: {}
}

typeGenerator(acord);

console.log("Done.");